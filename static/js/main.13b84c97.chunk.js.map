{"version":3,"sources":["Hangman.js","App.js","index.js"],"names":["Hangman","props","className","map","e","i","count","GameEnding","lettersCount","word","split","uniqueLetters","forEach","element","includes","console","log","push","length","getUniqueCount","words","missing","guessed","win","failed","GameEndingPrompt","winnerMsg","loserMsg","value","MissedLetters","missed","k","HiddenWord","content","toString","App","useState","avaliableLetters","setAvaliableLetters","wastedLetters","setWastedLetters","setWord","correctLetters","setCorrectLetters","updateFailedTries","defaultLetters","request","Request","updateKeyboard","newKeyboard","getNewWord","fetch","then","result","json","data","window","onload","onClick","correct","missedLettersUpdate","newLetters","filter","l","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13b84c97.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hangman(props){\r\n  const hangmanParts = [\r\n    \"hangman_bar_bottom\",\r\n    \"hangman_bar_vertical\",\r\n    \"hangman_bar_top\",\r\n    \"hangman_rope\",\r\n    \"hangman_head\",\r\n    \"hangman_body\",\r\n    \"hangman_hand_1\",\r\n    \"hangman_hand_2\",\r\n    \"hangman_leg_1\",\r\n    \"hangman_leg_2\",\r\n\r\n\r\n  ]\r\n    return(\r\n      <div className=\"hangman\">\r\n        {\r\n\r\n          hangmanParts.map((e,i) => props.count > i ? <div key={i} className={e}/> : null)\r\n        }\r\n\r\n        \r\n      </div> \r\n    )\r\n      }\r\n\r\n\r\nexport default Hangman;","import './App.css';\r\nimport {React, useState} from 'react';\r\nimport Hangman from './Hangman';\r\n\r\nconst  App = () => {\r\n\r\n  //ALL HOOKS USEED IN APP\r\n  //------------------------------------------START OF HOOKS-------------------------------------\r\n\r\n  //Hook responsible for letters that are still avaliable\r\n  const [avaliableLetters, setAvaliableLetters] = useState(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','z']); \r\n \r\n  //Used letters that does not contain in missing word\r\n  const [wastedLetters, setWastedLetters] = useState([]);\r\n \r\n  //constant that stores word, which player has to guess\r\n  const [word,setWord] = useState(\"\");\r\n \r\n  const[correctLetters, setCorrectLetters] = useState([]);\r\n  //Number of failed tries\r\n  const [failed, updateFailedTries] = useState(0);\r\n  \r\n  //------------------------------------------END OF HOOKS--------------------------------------\r\n  \r\n  //Default value of Keyboard\r\n  const defaultLetters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','z'];\r\n  \r\n  //URL of API. \"Number\" in url stands for number of words thats will be fetched from API. \r\n  const request = new Request(`https://random-word-api.herokuapp.com/word?number=1`);\r\n\r\n  //Function responsible for updating keyboard according to game state. At the begining it returns 24 letters.\r\n  const updateKeyboard = (newKeyboard) =>{\r\n    setAvaliableLetters(newKeyboard);\r\n  } \r\n  \r\n  const missedLettersUpdate = (missed) =>{\r\n    setWastedLetters(missed);\r\n  }\r\n\r\n  //Function that fetches new word from API \r\n  const getNewWord = () =>{\r\n    fetch(request).then(result => result.json()).then(data => setWord(data[0]));\r\n  };\r\n\r\n  //Getting new word at the begining\r\n  window.onload = () => {getNewWord()};\r\n\r\n  const newGame = () =>{\r\n        getNewWord();\r\n        updateKeyboard(defaultLetters);\r\n        setWastedLetters([]);\r\n        updateFailedTries(0);\r\n        setCorrectLetters([]);\r\n  }\r\n \r\n  return(\r\n    <>\r\n      <GameEnding failed={failed} words={{missing: word,guessed: correctLetters}}></GameEnding>\r\n     <div className=\"app\">\r\n      <HiddenWord content={word} guessed={correctLetters}></HiddenWord>\r\n      <Hangman count={failed}></Hangman>\r\n      <div className='keyboard'>\r\n            {avaliableLetters.map((e,i)=> {\r\n              return(\r\n            <button key={i}\r\n            onClick={()=>{\r\n             if( !word.includes(e)){\r\n               \r\n               const missed = wastedLetters;\r\n               missed[missed.length] = e;\r\n               updateFailedTries(failed+1);\r\n              missedLettersUpdate(missed);\r\n             }\r\n             else{\r\n               const correct = correctLetters;\r\n               correct[correct.length] = e;\r\n               setCorrectLetters(correct);\r\n             }\r\n             const newLetters = avaliableLetters.filter(l => l !== e);\r\n               updateKeyboard(newLetters);\r\n            }\r\n          \r\n          }\r\n            >\r\n              {e}\r\n            </button>\r\n              )\r\n            })}\r\n        </div>\r\n        <div className=\"missedLetters\">\r\n          {\r\n            <MissedLetters missed={wastedLetters}></MissedLetters>\r\n          }\r\n        </div>\r\n      <button \r\n      className=\"newWord\"\r\n      onClick={ ()=>{newGame()}\r\n      }>Roll new Word</button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst GameEnding = (props) =>{\r\n const lettersCount = getUniqueCount(props.words.missing)\r\n  return(\r\n    <>\r\n    {lettersCount === props.words.guessed.length ? <GameEndingPrompt win={true} word={props.words.missing}/> : null }\r\n    {10 === props.failed ? <GameEndingPrompt win={false} word={props.words.missing}/>: null}\r\n    </>\r\n  )\r\n}\r\n\r\nconst GameEndingPrompt = (props)=>{\r\n  const winnerMsg = `Your missing word was: ${props.word}`;\r\n  const loserMsg = `Your missing word was: ${props.word}`;\r\n return(\r\n    <div className={`gameEnding`} value={props.win}>\r\n      {props.win ? \"Congrats! You win.\"  : \"You lose :+(. \" }\r\n      <br></br>\r\n      {props.win ?  winnerMsg :  loserMsg}\r\n    </div>\r\n )\r\n}\r\nfunction getUniqueCount(word){\r\nword = word.split('');\r\nlet uniqueLetters =[];\r\n word.forEach(element => {\r\n  uniqueLetters.includes(element) ?  console.log('') : uniqueLetters.push(element) \r\n }); \r\nreturn(\r\n  uniqueLetters.length\r\n)\r\n\r\n}\r\nfunction MissedLetters(props){\r\n  return(\r\n    <div>\r\n      {props.missed.map((e,k) => <p key={k}>{e}</p>)} \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nfunction HiddenWord(props){\r\n  return(\r\n    <div className=\"hidden\">\r\n      {props.content.split('').map((e,i) =>   <p key={i.toString()}>{ props.guessed.includes(e) ? e : null}</p>)\r\n    }\r\n   \r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}