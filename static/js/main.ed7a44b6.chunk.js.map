{"version":3,"sources":["Hangman.js","App.js","index.js"],"names":["Hangman","props","className","map","e","i","count","GameEnding","lettersCount","word","split","uniqueLetters","forEach","element","includes","console","log","push","length","getUniqueCount","words","missing","guessed","win","failed","GameEndingPrompt","winnerMsg","loserMsg","value","MissedLetters","missed","k","HiddenWord","content","toString","App","useState","avaliableLetters","setAvaliableLetters","wastedLetters","setWastedLetters","setWord","correctLetters","setCorrectLetters","updateFailedTries","swear","setSwear","defaultLetters","request","Request","updateKeyboard","newKeyboard","getNewWord","fetch","then","result","json","data","window","onload","onClick","correct","missedLettersUpdate","newLetters","filter","l","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed7a44b6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hangman(props){\r\n  const hangmanParts = [\r\n    \"hangman_bar_bottom\",\r\n    \"hangman_bar_vertical\",\r\n    \"hangman_bar_top\",\r\n    \"hangman_rope\",\r\n    \"hangman_head\",\r\n    \"hangman_body\",\r\n    \"hangman_hand_1\",\r\n    \"hangman_hand_2\",\r\n    \"hangman_leg_1\",\r\n    \"hangman_leg_2\",\r\n\r\n\r\n  ]\r\n    return(\r\n      <div className=\"hangman\">\r\n        {\r\n\r\n          hangmanParts.map((e,i) => props.count > i ? <div key={i} className={e}/> : null)\r\n        }\r\n\r\n        \r\n      </div> \r\n    )\r\n      }\r\n\r\n\r\nexport default Hangman;","import './App.css';\nimport {React, useState} from 'react';\n\nimport Hangman from './Hangman';\nconst  App = () => {\n\n  //ALL HOOKS USEED IN APP\n  //------------------------------------------START OF HOOKS-------------------------------------\n\n  //Hook responsible for letters that are still avaliable\n  const [avaliableLetters, setAvaliableLetters] = useState(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','z']); \n \n  //Used letters that does not contain in missing word\n  const [wastedLetters, setWastedLetters] = useState([]);\n \n  //constant that stores word, which player has to guess\n  const [word,setWord] = useState(\"\");\n \n  const[correctLetters, setCorrectLetters] = useState([]);\n  //Number of failed tries\n  const [failed, updateFailedTries] = useState(0);\n  //Toggles wheter to allow swearwords in game or not\n  const[swear, setSwear] = useState(1);\n\n  //------------------------------------------END OF HOOKS--------------------------------------\n  \n  //Default value of Keyboard\n  const defaultLetters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','r','s','t','u','v','w','x','y','z'];\n  \n  //URL of API. \"Number\" in url stands for number of words thats will be fetched from API. \"swear\" has value of 1 or 0 depending on user settings(hook - swear)\n  const request = new Request(`https://random-word-api.herokuapp.com/word?number=1&swear=${swear}`);\n\n  //Function responsible for updating keyboard according to game state. At the begining it returns 24 letters.\n  const updateKeyboard = (newKeyboard) =>{\n    setAvaliableLetters(newKeyboard);\n  } \n  \n  const missedLettersUpdate = (missed) =>{\n    setWastedLetters(missed);\n  }\n\n  //Function that fetches new word from API \n  const getNewWord = () =>{\n    fetch(request).then(result => result.json()).then(data => setWord(data[0]));\n  };\n\n  //Getting new word at the begining\n  window.onload = () => {getNewWord()};\n\n \n  return(\n    <>\n      <GameEnding failed={failed} words={{missing: word,guessed: correctLetters}}></GameEnding>\n     <div className=\"app\">\n     <div className=\"swear\">\n          Swearwords\n         <button swear={swear} onClick={()=>{\n      swear === 1 ? setSwear(0) : setSwear(1)\n    }\n    }></button>\n    </div>\n      <HiddenWord content={word} guessed={correctLetters}></HiddenWord>\n      <Hangman count={failed}></Hangman>\n      <div className='keyboard'>\n            {avaliableLetters.map((e,i)=> {\n              return(\n            <button key={i}\n            onClick={()=>{\n             if( !word.includes(e)){\n               \n               const missed = wastedLetters;\n               missed[missed.length] = e;\n               updateFailedTries(failed+1);\n              missedLettersUpdate(missed);\n             }\n             else{\n               const correct = correctLetters;\n               correct[correct.length] = e;\n               setCorrectLetters(correct);\n             }\n             const newLetters = avaliableLetters.filter(l => l !== e);\n               updateKeyboard(newLetters);\n            }\n          \n          }\n            >\n              {e}\n            </button>\n              )\n            })}\n        </div>\n        <div className=\"missedLetters\">\n          {\n            <MissedLetters missed={wastedLetters}></MissedLetters>\n          }\n        </div>\n      <button \n      className=\"newWord\"\n      onClick={ ()=>{\n        getNewWord();\n        updateKeyboard(defaultLetters);\n        setWastedLetters([]);\n        updateFailedTries(0);\n        setCorrectLetters([]);\n      }\n      }>Roll new Word</button>\n      </div>\n    </>\n  )\n}\n\nconst GameEnding = (props) =>{\n const lettersCount = getUniqueCount(props.words.missing)\n  return(\n    <>\n    {lettersCount === props.words.guessed.length ? <GameEndingPrompt win={true} word={props.words.missing}/> : null }\n    {10 === props.failed ? <GameEndingPrompt win={false} word={props.words.missing}/>: null}\n    </>\n  )\n}\n\nconst GameEndingPrompt = (props)=>{\n  const winnerMsg = `Your missing word was: ${props.word}`;\n  const loserMsg = `Your missing word was: ${props.word}`;\n return(\n    <div className={`gameEnding`} value={props.win}>\n      {props.win ? \"Congrats! You win.\"  : \"You lose :+(. \" }\n      <br></br>\n      {props.win ?  winnerMsg :  loserMsg}\n    </div>\n )\n}\nfunction getUniqueCount(word){\nword = word.split('');\nlet uniqueLetters =[];\n word.forEach(element => {\n  uniqueLetters.includes(element) ?  console.log('') : uniqueLetters.push(element) \n }); \nreturn(\n  uniqueLetters.length\n)\n\n}\nfunction MissedLetters(props){\n  return(\n    <div>\n      {props.missed.map((e,k) => <p key={k}>{e}</p>)} \n      \n    </div>\n  )\n}\n\nfunction HiddenWord(props){\n  return(\n    <div className=\"hidden\">\n      {props.content.split('').map((e,i) =>   <p key={i.toString()}>{ props.guessed.includes(e) ? e : null}</p>)\n    }\n   \n    </div>\n  )\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}